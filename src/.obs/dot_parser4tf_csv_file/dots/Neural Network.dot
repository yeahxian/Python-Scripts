digraph "Neural Network"{
rankdir="LR"
node [shape="box"]
		"Neural Network" -> "atrous_conv2d" -> "tf.atrous_conv2d";
		"Neural Network" -> "avg_pool" -> "tf.avg_pool";
		"Neural Network" -> "avg_pool3d" -> "tf.avg_pool3d";
		"Neural Network" -> "batch_normalization" -> "tf.batch_normalization";
		"Neural Network" -> "bias_add" -> "tf.bias_add";
		"Neural Network" -> "bidirectional_rnn" -> "tf.bidirectional_rnn";
		"Neural Network" -> "compute_accidental_hits" -> "tf.compute_accidental_hits";
		"Neural Network" -> "conv2d" -> "tf.conv2d";
		"Neural Network" -> "conv2d_transpose" -> "tf.conv2d_transpose";
		"Neural Network" -> "conv3d" -> "tf.conv3d";
		"Neural Network" -> "ctc_beam_search_decoder" -> "tf.ctc_beam_search_decoder";
		"Neural Network" -> "ctc_greedy_decoder" -> "tf.ctc_greedy_decoder";
		"Neural Network" -> "ctc_loss" -> "tf.ctc_loss";
		"Neural Network" -> "depthwise_conv2d" -> "tf.depthwise_conv2d";
		"Neural Network" -> "depthwise_conv2d_native" -> "tf.depthwise_conv2d_native";
		"Neural Network" -> "dilation2d" -> "tf.dilation2d";
		"Neural Network" -> "dropout" -> "tf.dropout";
		"Neural Network" -> "dynamic_rnn" -> "tf.dynamic_rnn";
		"Neural Network" -> "elu" -> "tf.elu";
		"Neural Network" -> "embedding_lookup" -> "tf.embedding_lookup";
		"Neural Network" -> "embedding_lookup_sparse" -> "tf.embedding_lookup_sparse";
		"Neural Network" -> "erosion2d" -> "tf.erosion2d";
		"Neural Network" -> "fixed_unigram_candidate_sampler" -> "tf.fixed_unigram_candidate_sampler";
		"Neural Network" -> "in_top_k" -> "tf.in_top_k";
		"Neural Network" -> "l2_loss" -> "tf.l2_loss";
		"Neural Network" -> "l2_normalize" -> "tf.l2_normalize";
		"Neural Network" -> "learned_unigram_candidate_sampler" -> "tf.learned_unigram_candidate_sampler";
		"Neural Network" -> "local_response_normalization" -> "tf.local_response_normalization";
		"Neural Network" -> "log_softmax" -> "tf.log_softmax";
		"Neural Network" -> "log_uniform_candidate_sampler" -> "tf.log_uniform_candidate_sampler";
		"Neural Network" -> "max_pool" -> "tf.max_pool";
		"Neural Network" -> "max_pool3d" -> "tf.max_pool3d";
		"Neural Network" -> "max_pool_with_argmax" -> "tf.max_pool_with_argmax";
		"Neural Network" -> "moments" -> "tf.moments";
		"Neural Network" -> "nce_loss" -> "tf.nce_loss";
		"Neural Network" -> "normalize_moments" -> "tf.normalize_moments";
		"Neural Network" -> "relu" -> "tf.relu";
		"Neural Network" -> "relu6" -> "tf.relu6";
		"Neural Network" -> "rnn" -> "tf.rnn";
		"Neural Network" -> "sampled_softmax_loss" -> "tf.sampled_softmax_loss";
		"Neural Network" -> "separable_conv2d" -> "tf.separable_conv2d";
		"Neural Network" -> "sigmoid" -> "tf.sigmoid";
		"Neural Network" -> "sigmoid_cross_entropy_with_logits" -> "tf.sigmoid_cross_entropy_with_logits";
		"Neural Network" -> "softmax" -> "tf.softmax";
		"Neural Network" -> "softmax_cross_entropy_with_logits" -> "tf.softmax_cross_entropy_with_logits";
		"Neural Network" -> "softplus" -> "tf.softplus";
		"Neural Network" -> "softsign" -> "tf.softsign";
		"Neural Network" -> "sparse_softmax_cross_entropy_with_logits" -> "tf.sparse_softmax_cross_entropy_with_logits";
		"Neural Network" -> "state_saving_rnn" -> "tf.state_saving_rnn";
		"Neural Network" -> "sufficient_statistics" -> "tf.sufficient_statistics";
		"Neural Network" -> "tanh" -> "tf.tanh";
		"Neural Network" -> "top_k" -> "tf.top_k";
		"Neural Network" -> "uniform_candidate_sampler" -> "tf.uniform_candidate_sampler";
		"Neural Network" -> "weighted_cross_entropy_with_logits" -> "tf.weighted_cross_entropy_with_logits";
}
